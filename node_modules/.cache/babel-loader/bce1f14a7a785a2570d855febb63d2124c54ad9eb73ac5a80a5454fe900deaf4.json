{"ast":null,"code":"import axios from 'axios';\n\n// Create an instance of axios with default config\nconst api = axios.create({\n  baseURL: 'https://assignment.reachinbox.com/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (user && user.token) {\n    config.headers.Authorization = `Bearer ${user.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Mock data for API responses\nconst mockThreads = [{\n  id: '1',\n  from: 'john.doe@example.com',\n  fromName: 'John Doe',\n  to: 'me@example.com',\n  subject: 'Project Discussion Follow-up',\n  preview: 'Hey, I wanted to follow up on our meeting yesterday...',\n  body: '<p>Hey,</p><p>I wanted to follow up on our meeting yesterday. I think we have a good plan going forward with the project. Let me know if you have any questions.</p><p>Best regards,<br/>John</p>',\n  timestamp: '2023-03-15T10:30:00Z',\n  avatar: 'https://randomuser.me/api/portraits/men/1.jpg'\n}, {\n  id: '2',\n  from: 'sarah.parker@example.com',\n  fromName: 'Sarah Parker',\n  to: 'me@example.com',\n  subject: 'Monthly Report - February 2023',\n  preview: 'Please find attached the monthly report for February 2023...',\n  body: '<p>Hi there,</p><p>Please find attached the monthly report for February 2023. We exceeded our sales targets by 15% this month!</p><p>Regards,<br/>Sarah</p>',\n  timestamp: '2023-03-14T15:45:00Z',\n  avatar: 'https://randomuser.me/api/portraits/women/2.jpg'\n}, {\n  id: '3',\n  from: 'mike.wilson@example.com',\n  fromName: 'Mike Wilson',\n  to: 'me@example.com',\n  subject: 'Team Building Event',\n  preview: 'We are planning a team building event next month...',\n  body: '<p>Hello everyone,</p><p>We are planning a team building event next month. It will be on the 15th of April. Please mark your calendars!</p><p>Best,<br/>Mike</p>',\n  timestamp: '2023-03-13T09:20:00Z',\n  avatar: 'https://randomuser.me/api/portraits/men/3.jpg'\n}];\n\n// API functions - Using mock data for development\nexport const loginWithGoogle = async () => {\n  // Simulate API call\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        token: 'mock_token_12345',\n        user: {\n          name: 'John Doe',\n          email: 'john.doe@example.com',\n          picture: 'https://randomuser.me/api/portraits/men/1.jpg'\n        }\n      });\n    }, 500);\n  });\n};\nexport const getOneboxList = async () => {\n  // Simulate API call\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(mockThreads);\n    }, 500);\n  });\n};\nexport const getOneboxThread = async threadId => {\n  // Simulate API call\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const thread = mockThreads.find(t => t.id === threadId);\n      if (thread) {\n        resolve(thread);\n      } else {\n        reject(new Error('Thread not found'));\n      }\n    }, 500);\n  });\n};\nexport const deleteOneboxThread = async threadId => {\n  // Simulate API call\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        message: 'Thread deleted successfully'\n      });\n    }, 500);\n  });\n};\nexport const sendReply = async (threadId, replyData) => {\n  // Simulate API call\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        message: 'Reply sent successfully'\n      });\n    }, 500);\n  });\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","Authorization","error","Promise","reject","mockThreads","id","from","fromName","to","subject","preview","body","timestamp","avatar","loginWithGoogle","resolve","setTimeout","name","email","picture","getOneboxList","getOneboxThread","threadId","thread","find","t","Error","deleteOneboxThread","success","message","sendReply","replyData"],"sources":["C:/Users/ashiq/OneDrive/Desktop/projects/reach-in-box/Outbox/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an instance of axios with default config\r\nconst api = axios.create({\r\n  baseURL: 'https://assignment.reachinbox.com/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor to include auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user && user.token) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Mock data for API responses\r\nconst mockThreads = [\r\n  {\r\n    id: '1',\r\n    from: 'john.doe@example.com',\r\n    fromName: 'John Doe',\r\n    to: 'me@example.com',\r\n    subject: 'Project Discussion Follow-up',\r\n    preview: 'Hey, I wanted to follow up on our meeting yesterday...',\r\n    body: '<p>Hey,</p><p>I wanted to follow up on our meeting yesterday. I think we have a good plan going forward with the project. Let me know if you have any questions.</p><p>Best regards,<br/>John</p>',\r\n    timestamp: '2023-03-15T10:30:00Z',\r\n    avatar: 'https://randomuser.me/api/portraits/men/1.jpg'\r\n  },\r\n  {\r\n    id: '2',\r\n    from: 'sarah.parker@example.com',\r\n    fromName: 'Sarah Parker',\r\n    to: 'me@example.com',\r\n    subject: 'Monthly Report - February 2023',\r\n    preview: 'Please find attached the monthly report for February 2023...',\r\n    body: '<p>Hi there,</p><p>Please find attached the monthly report for February 2023. We exceeded our sales targets by 15% this month!</p><p>Regards,<br/>Sarah</p>',\r\n    timestamp: '2023-03-14T15:45:00Z',\r\n    avatar: 'https://randomuser.me/api/portraits/women/2.jpg'\r\n  },\r\n  {\r\n    id: '3',\r\n    from: 'mike.wilson@example.com',\r\n    fromName: 'Mike Wilson',\r\n    to: 'me@example.com',\r\n    subject: 'Team Building Event',\r\n    preview: 'We are planning a team building event next month...',\r\n    body: '<p>Hello everyone,</p><p>We are planning a team building event next month. It will be on the 15th of April. Please mark your calendars!</p><p>Best,<br/>Mike</p>',\r\n    timestamp: '2023-03-13T09:20:00Z',\r\n    avatar: 'https://randomuser.me/api/portraits/men/3.jpg'\r\n  }\r\n];\r\n\r\n// API functions - Using mock data for development\r\nexport const loginWithGoogle = async () => {\r\n  // Simulate API call\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        token: 'mock_token_12345',\r\n        user: {\r\n          name: 'John Doe',\r\n          email: 'john.doe@example.com',\r\n          picture: 'https://randomuser.me/api/portraits/men/1.jpg'\r\n        }\r\n      });\r\n    }, 500);\r\n  });\r\n};\r\n\r\nexport const getOneboxList = async () => {\r\n  // Simulate API call\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(mockThreads);\r\n    }, 500);\r\n  });\r\n};\r\n\r\nexport const getOneboxThread = async (threadId) => {\r\n  // Simulate API call\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const thread = mockThreads.find(t => t.id === threadId);\r\n      if (thread) {\r\n        resolve(thread);\r\n      } else {\r\n        reject(new Error('Thread not found'));\r\n      }\r\n    }, 500);\r\n  });\r\n};\r\n\r\nexport const deleteOneboxThread = async (threadId) => {\r\n  // Simulate API call\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({ success: true, message: 'Thread deleted successfully' });\r\n    }, 500);\r\n  });\r\n};\r\n\r\nexport const sendReply = async (threadId, replyData) => {\r\n  // Simulate API call\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({ success: true, message: 'Reply sent successfully' });\r\n    }, 500);\r\n  });\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}