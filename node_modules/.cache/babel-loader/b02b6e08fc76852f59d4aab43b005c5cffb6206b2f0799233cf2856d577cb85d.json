{"ast":null,"code":"import axios from 'axios';\n\n// Create an instance of axios with default config\nconst api = axios.create({\n  baseURL: 'https://hiring.reachinbox.xyz/api/v1',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (user && user.token) {\n    config.headers.Authorization = `Bearer ${user.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  return {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${(user === null || user === void 0 ? void 0 : user.token) || ''}`\n  };\n};\n\n// Mock data for API responses\nconst mockThreads = [{\n  id: '1',\n  from: 'john.doe@example.com',\n  fromName: 'John Doe',\n  to: 'me@example.com',\n  subject: 'Project Discussion Follow-up',\n  preview: 'Hey, I wanted to follow up on our meeting yesterday...',\n  body: '<p>Hey,</p><p>I wanted to follow up on our meeting yesterday. I think we have a good plan going forward with the project. Let me know if you have any questions.</p><p>Best regards,<br/>John</p>',\n  timestamp: '2023-03-15T10:30:00Z',\n  avatar: 'https://randomuser.me/api/portraits/men/1.jpg'\n}, {\n  id: '2',\n  from: 'sarah.parker@example.com',\n  fromName: 'Sarah Parker',\n  to: 'me@example.com',\n  subject: 'Monthly Report - February 2023',\n  preview: 'Please find attached the monthly report for February 2023...',\n  body: '<p>Hi there,</p><p>Please find attached the monthly report for February 2023. We exceeded our sales targets by 15% this month!</p><p>Regards,<br/>Sarah</p>',\n  timestamp: '2023-03-14T15:45:00Z',\n  avatar: 'https://randomuser.me/api/portraits/women/2.jpg'\n}, {\n  id: '3',\n  from: 'mike.wilson@example.com',\n  fromName: 'Mike Wilson',\n  to: 'me@example.com',\n  subject: 'Team Building Event',\n  preview: 'We are planning a team building event next month...',\n  body: '<p>Hello everyone,</p><p>We are planning a team building event next month. It will be on the 15th of April. Please mark your calendars!</p><p>Best,<br/>Mike</p>',\n  timestamp: '2023-03-13T09:20:00Z',\n  avatar: 'https://randomuser.me/api/portraits/men/3.jpg'\n}];\n\n// Helper function to handle API calls with fallback to mock data\nconst apiCallWithFallback = async (apiCall, mockData) => {\n  try {\n    const response = await apiCall();\n    return response.data;\n  } catch (error) {\n    console.warn('API call failed, using mock data:', error.message);\n    return mockData;\n  }\n};\n\n// API endpoints\nconst ENDPOINTS = {\n  GOOGLE_LOGIN: 'https://hiring.reachinbox.xyz/api/v1/auth/google-login?redirect_to=https://frontend.com',\n  ONEBOX_LIST: 'https://hiring.reachinbox.xyz/api/v1/onebox/list',\n  ONEBOX_THREAD: threadId => `https://hiring.reachinbox.xyz/api/v1/onebox/${threadId}`,\n  REPLY_THREAD: threadId => `https://hiring.reachinbox.xyz/api/v1/reply/${threadId}`\n};\n\n// Function to redirect to Google login\nexport const redirectToGoogleLogin = () => {\n  window.location.href = ENDPOINTS.GOOGLE_LOGIN;\n};\n\n// API functions with real API calls but fallback to mock data\nexport const loginWithGoogle = async () => {\n  // For testing purposes, we'll use a mock response\n  // In a real scenario, we would redirect to GOOGLE_LOGIN_URL\n  // and handle the callback with tokens\n  return apiCallWithFallback(() => api.get('/auth/google-login/callback'),\n  // This is a placeholder, won't be used directly\n  {\n    token: 'mock_token_12345',\n    user: {\n      name: 'John Doe',\n      email: 'john.doe@example.com',\n      picture: 'https://randomuser.me/api/portraits/men/1.jpg'\n    }\n  });\n};\nexport const getOneboxList = async () => {\n  // Use the specific onebox list endpoint\n  return apiCallWithFallback(() => axios.get(ENDPOINTS.ONEBOX_LIST, {\n    headers: getAuthHeaders()\n  }), mockThreads);\n};\nexport const getOneboxThread = async threadId => {\n  return apiCallWithFallback(() => axios.get(ENDPOINTS.ONEBOX_THREAD(threadId), {\n    headers: getAuthHeaders()\n  }), mockThreads.find(t => t.id === threadId) || null);\n};\nexport const deleteOneboxThread = async threadId => {\n  return apiCallWithFallback(() => axios.delete(ENDPOINTS.ONEBOX_THREAD(threadId), {\n    headers: getAuthHeaders()\n  }), {\n    success: true,\n    message: 'Thread deleted successfully'\n  });\n};\nexport const sendReply = async (threadId, replyData) => {\n  return apiCallWithFallback(() => axios.post(ENDPOINTS.REPLY_THREAD(threadId), replyData, {\n    headers: getAuthHeaders()\n  }), {\n    success: true,\n    message: 'Reply sent successfully'\n  });\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","Authorization","error","Promise","reject","getAuthHeaders","mockThreads","id","from","fromName","to","subject","preview","body","timestamp","avatar","apiCallWithFallback","apiCall","mockData","response","data","console","warn","message","ENDPOINTS","GOOGLE_LOGIN","ONEBOX_LIST","ONEBOX_THREAD","threadId","REPLY_THREAD","redirectToGoogleLogin","window","location","href","loginWithGoogle","get","name","email","picture","getOneboxList","getOneboxThread","find","t","deleteOneboxThread","delete","success","sendReply","replyData","post"],"sources":["C:/Users/ashiq/OneDrive/Desktop/projects/reach-in-box/Outbox/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an instance of axios with default config\r\nconst api = axios.create({\r\n  baseURL: 'https://hiring.reachinbox.xyz/api/v1',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor to include auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user && user.token) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Helper function to get auth headers\r\nconst getAuthHeaders = () => {\r\n  const user = JSON.parse(localStorage.getItem('user'));\r\n  return {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': `Bearer ${user?.token || ''}`\r\n  };\r\n};\r\n\r\n// Mock data for API responses\r\nconst mockThreads = [\r\n  {\r\n    id: '1',\r\n    from: 'john.doe@example.com',\r\n    fromName: 'John Doe',\r\n    to: 'me@example.com',\r\n    subject: 'Project Discussion Follow-up',\r\n    preview: 'Hey, I wanted to follow up on our meeting yesterday...',\r\n    body: '<p>Hey,</p><p>I wanted to follow up on our meeting yesterday. I think we have a good plan going forward with the project. Let me know if you have any questions.</p><p>Best regards,<br/>John</p>',\r\n    timestamp: '2023-03-15T10:30:00Z',\r\n    avatar: 'https://randomuser.me/api/portraits/men/1.jpg'\r\n  },\r\n  {\r\n    id: '2',\r\n    from: 'sarah.parker@example.com',\r\n    fromName: 'Sarah Parker',\r\n    to: 'me@example.com',\r\n    subject: 'Monthly Report - February 2023',\r\n    preview: 'Please find attached the monthly report for February 2023...',\r\n    body: '<p>Hi there,</p><p>Please find attached the monthly report for February 2023. We exceeded our sales targets by 15% this month!</p><p>Regards,<br/>Sarah</p>',\r\n    timestamp: '2023-03-14T15:45:00Z',\r\n    avatar: 'https://randomuser.me/api/portraits/women/2.jpg'\r\n  },\r\n  {\r\n    id: '3',\r\n    from: 'mike.wilson@example.com',\r\n    fromName: 'Mike Wilson',\r\n    to: 'me@example.com',\r\n    subject: 'Team Building Event',\r\n    preview: 'We are planning a team building event next month...',\r\n    body: '<p>Hello everyone,</p><p>We are planning a team building event next month. It will be on the 15th of April. Please mark your calendars!</p><p>Best,<br/>Mike</p>',\r\n    timestamp: '2023-03-13T09:20:00Z',\r\n    avatar: 'https://randomuser.me/api/portraits/men/3.jpg'\r\n  }\r\n];\r\n\r\n// Helper function to handle API calls with fallback to mock data\r\nconst apiCallWithFallback = async (apiCall, mockData) => {\r\n  try {\r\n    const response = await apiCall();\r\n    return response.data;\r\n  } catch (error) {\r\n    console.warn('API call failed, using mock data:', error.message);\r\n    return mockData;\r\n  }\r\n};\r\n\r\n// API endpoints\r\nconst ENDPOINTS = {\r\n  GOOGLE_LOGIN: 'https://hiring.reachinbox.xyz/api/v1/auth/google-login?redirect_to=https://frontend.com',\r\n  ONEBOX_LIST: 'https://hiring.reachinbox.xyz/api/v1/onebox/list',\r\n  ONEBOX_THREAD: (threadId) => `https://hiring.reachinbox.xyz/api/v1/onebox/${threadId}`,\r\n  REPLY_THREAD: (threadId) => `https://hiring.reachinbox.xyz/api/v1/reply/${threadId}`\r\n};\r\n\r\n// Function to redirect to Google login\r\nexport const redirectToGoogleLogin = () => {\r\n  window.location.href = ENDPOINTS.GOOGLE_LOGIN;\r\n};\r\n\r\n// API functions with real API calls but fallback to mock data\r\nexport const loginWithGoogle = async () => {\r\n  // For testing purposes, we'll use a mock response\r\n  // In a real scenario, we would redirect to GOOGLE_LOGIN_URL\r\n  // and handle the callback with tokens\r\n  return apiCallWithFallback(\r\n    () => api.get('/auth/google-login/callback'), // This is a placeholder, won't be used directly\r\n    {\r\n      token: 'mock_token_12345',\r\n      user: {\r\n        name: 'John Doe',\r\n        email: 'john.doe@example.com',\r\n        picture: 'https://randomuser.me/api/portraits/men/1.jpg'\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\nexport const getOneboxList = async () => {\r\n  // Use the specific onebox list endpoint\r\n  return apiCallWithFallback(\r\n    () => axios.get(ENDPOINTS.ONEBOX_LIST, {\r\n      headers: getAuthHeaders()\r\n    }),\r\n    mockThreads\r\n  );\r\n};\r\n\r\nexport const getOneboxThread = async (threadId) => {\r\n  return apiCallWithFallback(\r\n    () => axios.get(ENDPOINTS.ONEBOX_THREAD(threadId), {\r\n      headers: getAuthHeaders()\r\n    }),\r\n    mockThreads.find(t => t.id === threadId) || null\r\n  );\r\n};\r\n\r\nexport const deleteOneboxThread = async (threadId) => {\r\n  return apiCallWithFallback(\r\n    () => axios.delete(ENDPOINTS.ONEBOX_THREAD(threadId), {\r\n      headers: getAuthHeaders()\r\n    }),\r\n    { success: true, message: 'Thread deleted successfully' }\r\n  );\r\n};\r\n\r\nexport const sendReply = async (threadId, replyData) => {\r\n  return apiCallWithFallback(\r\n    () => axios.post(ENDPOINTS.REPLY_THREAD(threadId), replyData, {\r\n      headers: getAuthHeaders()\r\n    }),\r\n    { success: true, message: 'Reply sent successfully' }\r\n  );\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}